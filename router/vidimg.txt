router.get('/api/videos', (req, res) => {
  // Lire le contenu du répertoire "videos"
  fs.readdir(videosDirectory, (err, videoFiles) => {
    if (err) {
      console.error('Erreur lors de la lecture du répertoire des vidéos :', err);
      return res.status(500).json({ error: 'Erreur serveur' });
    }

    // Lire le contenu du répertoire "images"
    fs.readdir(imagesDirectory, (err, imageFiles) => {
      if (err) {
        console.error('Erreur lors de la lecture du répertoire des images :', err);
        return res.status(500).json({ error: 'Erreur serveur' });
      }

      // Filtrer les fichiers vidéo pour ne récupérer que les vidéos
      const videoFilesFiltered = videoFiles.filter(file => {
        const fileExtension = path.extname(file).toLowerCase();
        return ['.mp4', '.avi', '.mkv', '.mov'].includes(fileExtension);
      });

      // Créer une liste d'objets vidéo avec les noms des fichiers et les URL d'image
      const videoList = videoFilesFiltered.map(file => {
        const imageFile = imageFiles.find(img => img.startsWith(path.basename(file, path.extname(file))));
        const imageUrl = imageFile ? `/vid/api/images/${imageFile}` : '/default-image.jpg'; // Définir une image par défaut si aucune image correspondante n'est trouvée
        return {
          name: file,
          urlvideo: `/vid/api/videos/${file}`,
          urlimg: imageUrl,
        };
      });

      // Renvoyer la liste des vidéos sous forme de réponse JSON
      res.json(videoList);
    });
  });
});  